# Generated by Django 4.2.23 on 2025-08-22 16:50

from django.conf import settings
from django.db import migrations, models, connection
import django.db.models.deletion


def check_table_exists(table_name):
    """Check if a table exists in the database"""
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = %s
            );
        """, [table_name])
        return cursor.fetchone()[0]


class SafeCreateModel(migrations.CreateModel):
    """Custom CreateModel operation that checks if table exists first"""
    
    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        table_name = f"{app_label}_{self.name.lower()}"
        if not check_table_exists(table_name):
            super().database_forwards(app_label, schema_editor, from_state, to_state)
        else:
            print(f"Table {table_name} already exists, skipping creation")


class SafeAddField(migrations.AddField):
    """Custom AddField operation that checks if column exists first"""
    
    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        model = from_state.apps.get_model(app_label, self.model_name)
        table_name = model._meta.db_table
        column_name = self.field.column
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT EXISTS (
                    SELECT FROM information_schema.columns 
                    WHERE table_schema = 'public' 
                    AND table_name = %s 
                    AND column_name = %s
                );
            """, [table_name, column_name])
            column_exists = cursor.fetchone()[0]
        
        if not column_exists:
            super().database_forwards(app_label, schema_editor, from_state, to_state)
        else:
            print(f"Column {column_name} already exists in {table_name}, skipping addition")


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("membership", "0003_alter_member_options_and_more"),
    ]

    operations = [
        SafeCreateModel(
            name="Branch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "code",
                    models.CharField(
                        help_text="Short code for the branch (e.g., 'ARU', 'DAR')",
                        max_length=10,
                        unique=True,
                    ),
                ),
                ("address", models.TextField(blank=True)),
                ("phone", models.CharField(blank=True, max_length=15)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("pastor_name", models.CharField(blank=True, max_length=100)),
                ("established_date", models.DateField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Tawi",
                "verbose_name_plural": "Matawi",
                "ordering": ["name"],
            },
        ),
        SafeCreateModel(
            name="NewsCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                (
                    "color",
                    models.CharField(
                        default="#007bff",
                        help_text="Hex color code for category",
                        max_length=7,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Jamii ya Habari",
                "verbose_name_plural": "Jamii za Habari",
                "ordering": ["name"],
            },
        ),
        SafeCreateModel(
            name="AttendanceSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("sunday_service", "Sunday Service"),
                            ("prayer_meeting", "Prayer Meeting"),
                            ("bible_study", "Bible Study"),
                            ("youth_service", "Youth Service"),
                            ("special_event", "Special Event"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("date", models.DateField()),
                ("start_time", models.TimeField()),
                ("end_time", models.TimeField(blank=True, null=True)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "branch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_sessions",
                        to="membership.branch",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Kipindi cha Mahudhurio",
                "verbose_name_plural": "Vipindi vya Mahudhurio",
                "ordering": ["-date", "-start_time"],
                "unique_together": {("branch", "date", "start_time", "service_type")},
            },
        ),
        SafeAddField(
            model_name="member",
            name="branch",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="members",
                to="membership.branch",
            ),
        ),
        SafeCreateModel(
            name="News",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "scope",
                    models.CharField(
                        choices=[
                            ("general", "General Church News"),
                            ("branch", "Branch Specific"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("publish_date", models.DateTimeField()),
                (
                    "expiry_date",
                    models.DateTimeField(
                        blank=True, help_text="Optional expiry date", null=True
                    ),
                ),
                ("is_published", models.BooleanField(default=False)),
                ("is_featured", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authored_news",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "branch",
                    models.ForeignKey(
                        blank=True,
                        help_text="Required for branch-specific news",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="news",
                        to="membership.branch",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="membership.newscategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Habari",
                "verbose_name_plural": "Habari",
                "ordering": ["-publish_date", "-priority"],
                "indexes": [
                    models.Index(
                        fields=["scope", "branch"], name="membership__scope_3b69d6_idx"
                    ),
                    models.Index(
                        fields=["publish_date", "is_published"],
                        name="membership__publish_6ba996_idx",
                    ),
                    models.Index(
                        fields=["priority", "is_featured"],
                        name="membership__priorit_3c37b7_idx",
                    ),
                ],
            },
        ),
        SafeCreateModel(
            name="AttendanceRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("marked_at", models.DateTimeField(auto_now_add=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "marked_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="marked_attendance",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_records",
                        to="membership.member",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_records",
                        to="membership.attendancesession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Rekodi ya Mahudhurio",
                "verbose_name_plural": "Rekodi za Mahudhurio",
                "ordering": ["-marked_at"],
                "unique_together": {("session", "member")},
            },
        ),
    ]
